// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
//   url      = env("DATABASE_URL") // TODO: Decide if fix location or .env location
  url      = "file:./database/dev.db"
}

model User {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  username     String    @unique
  nickname     String    @unique
  passwordHash String
  salt         String
  picture      String    @default("/uploads/users/default/picture.jpg")

  friendships1 Friendship[] @relation("User1Friends")
  friendships2 Friendship[] @relation("User2Friends")
  // SQLite doesn't support lists of primitive types** like `String[]` so I cannot do:
  // friends      String[]  @default([])

  friendRequestsSent     FriendRequest[] @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")

  blockedUsers BlockList[] @relation("Blocker")
  blockedBy    BlockList[] @relation("Blocked")

  products     Product[] // TODO: Remove this legacy code

  @@index([createdAt])
}

model Friendship {
  id        String   @id @default(uuid())
  user1     User     @relation("User1Friends", fields: [user1Id], references: [id])
  user1Id   String
  user2     User     @relation("User2Friends", fields: [user2Id], references: [id])
  user2Id   String
  createdAt DateTime @default(now())
  @@unique([user1Id, user2Id]) // prevents duplicate friendships
  // We'll enforce user1Id < user2Id to avoid A-B and B-A are not stored twice

  @@index([user1Id])
  @@index([user2Id])
}

model FriendRequest {
  id        String   @id @default(uuid())
  from      User     @relation("FriendRequestsSent", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("FriendRequestsReceived", fields: [toId], references: [id])
  toId      String
  message   String
  createdAt DateTime @default(now())

  @@unique([fromId, toId]) // prevents duplicate FriendRequest
  @@index([fromId])
  @@index([toId])
}

model BlockList {
  id          String   @id @default(uuid())
  blocker     User     @relation("Blocker", fields: [blockerId], references: [id])
  blockerId   String
  blocked     User     @relation("Blocked", fields: [blockedId], references: [id])
  blockedId   String
  createdAt   DateTime @default(now())

  @@unique([blockerId, blockedId]) // prevent duplicates
  @@index([blockerId])
  @@index([blockedId])
}

 // TODO: Remove this legacy code
model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String //@db.VarChar(255)
  content   String?
  price     Float
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
}
