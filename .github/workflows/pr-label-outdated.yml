name: PR Outdated Label

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: "0 5 * * *" # Every day at 05:00 UTC ## Every 2 hours UTC:"0 */2 * * *" ## Every 5 min UTC: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OUTDATED_LABEL: outdated
  OUTDATED_COMMENT: "⚠️ This PR is out-of-date with the base branch (`main`). Please merge the latest changes from `main` into your branch."
  COMMENT_LOOKBACK_COUNT: 2

jobs:
  # ───────────────────────────────────────────────
  # 🔁 JOB 1: PR-triggered (reacts to PR creation/update)
  # ───────────────────────────────────────────────
  label_on_pr_event:
    if: github.event_name == 'pull_request'
    name: Label outdated PR (on PR activity)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Check if PR is outdated
        uses: ./.github/actions/check-if-outdated
        id: outdated
        with:
          base: main
          head: ${{ github.event.pull_request.head.sha }}

      - name: Add label if outdated
        if: steps.outdated.outputs.is_outdated == 'true'
        uses: ./.github/actions/add-label-if-missing
        with:
          pr_number: ${{ github.event.pull_request.number }}
          label: ${{ env.OUTDATED_LABEL }}

      - name: Comment about outdated status
        if: steps.outdated.outputs.is_outdated == 'true'
        uses: ./.github/actions/comment-outdated-status
        with:
          pr_number: ${{ github.event.pull_request.number }}
          comment_body: ${{ env.OUTDATED_COMMENT }}
          lookback_count: ${{ env.COMMENT_LOOKBACK_COUNT }}

      - name: Remove outdated label if up-to-date
        if: steps.outdated.outputs.is_outdated == 'false'
        uses: ./.github/actions/remove-label-if-present
        with:
          pr_number: ${{ github.event.pull_request.number }}
          label: ${{ env.OUTDATED_LABEL }}

      - name: Remove outdated comment if up-to-date
        if: steps.outdated.outputs.is_outdated == 'false'
        uses: ./.github/actions/remove-comment-if-present
        with:
          pr_number: ${{ github.event.pull_request.number }}
          comment_body: ${{ env.OUTDATED_COMMENT }}

  # ───────────────────────────────────────────────
  # ⏰ JOB 2: Scheduled (checks open PRs via GitHub API only)
  # ───────────────────────────────────────────────
  label_on_schedule_event:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: Label outdated PRs (scheduled check)
    runs-on: ubuntu-latest

    steps:
      - name: Run scheduled PR check
        uses: actions/github-script@v7
        env:
          OUTDATED_LABEL: ${{ env.OUTDATED_LABEL }}
          OUTDATED_COMMENT: ${{ env.OUTDATED_COMMENT }}
          COMMENT_LOOKBACK_COUNT: ${{ env.COMMENT_LOOKBACK_COUNT }}
        with:
          github-token: ${{ github.token }}
          script: |
            const { repo, owner } = context.repo;
            const outdatedLabel = process.env.OUTDATED_LABEL;
            const commentBody = process.env.OUTDATED_COMMENT;
            const lookback = Number(process.env.COMMENT_LOOKBACK_COUNT) || 2;

            console.log(`🔁 Scheduled check for ${owner}/${repo}`);

            const prs = await github.paginate(github.rest.pulls.list, {
              owner,
              repo,
              state: 'open',
              base: 'main'
            });

            for (const pr of prs) {
              const prNumber = pr.number;

              const compare = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: 'main',
                head: pr.head.ref,
              });

              const is_outdated = compare.data.behind_by > 0;

              const { data: labels } = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: prNumber });
              const hasOutdated = labels.some(label => label.name === outdatedLabel);

              if (is_outdated && !hasOutdated) {
                console.log(`➕ Adding '${outdatedLabel}' to PR #${prNumber}`);
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: [outdatedLabel],
                });

                const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: prNumber });
                const recent = comments.slice(-lookback);
                const exists = recent.some(c => c.body === commentBody);
                if (!exists) {
                  const previous = comments.find(c => c.body === commentBody);
                  if (previous) {
                    await github.rest.issues.deleteComment({ owner, repo, comment_id: previous.id });
                  }
                  await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: commentBody });
                }
              }

              if (!is_outdated && hasOutdated) {
                try {
                  console.log(`➖ Removing '${outdatedLabel}' from PR #${prNumber}`);
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: prNumber,
                    name: outdatedLabel,
                  });
                } catch (e) {
                  if (e.status !== 404) throw e;
                }

                const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: prNumber });
                const match = comments.find(c => c.body === commentBody);
                if (match) {
                  await github.rest.issues.deleteComment({ owner, repo, comment_id: match.id });
                }
              }
            }

# ───────────────────────────────────────────────
# 🛠 DEBUGGING TIPS
# To enable step debug logs:
# → Go to repo Settings > Actions > Secrets and add:
#    Name: ACTIONS_STEP_DEBUG
#    Value: true
#
# Inside github-script blocks, log debug messages like:
# → core.debug("This is a custom debug message");
# (note: core.debug() only shows up if ACTIONS_STEP_DEBUG is true)
#
# Runner-level debug (less common):
# → Add secret: ACTIONS_RUNNER_DEBUG = true
# ───────────────────────────────────────────────
